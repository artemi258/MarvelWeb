{"version":3,"sources":["components/charList/CharList.js","resources/img/mjolnir.png","components/randomChar/RandomChar.js","components/charInfo/CharInfo.js","components/charSearchForm/charSearchForm.js","components/errorBoundary/ErrorBoundary.js","resources/img/vision.png","components/pages/MainPage.js","components/errorMessage/error.gif","components/errorMessage/ErrorMessage.js","services/MarvelServices.js","hooks/http.hook.js","components/skeleton/Skeleton.js","utils/setContent.js"],"names":["CharList","props","useState","char","setChar","newItemLoading","setNewItemLoading","offset","setOffset","ended","setEnded","useMarvelServices","getAllCharacters","clearError","process","setProcess","onCharLoaded","charList","onRequest","character","then","myRef","useRef","onRef","id","current","focus","useEffect","content","useMemo","setContent","chars","className","disabled","onClick","style","display","map","item","i","name","thumbnail","objFit","CSSTransition","timeout","classNames","onCharSelected","tabIndex","onKeyDown","e","key","ref","src","objectFit","alt","TransitionGroup","component","View","data","description","homepage","wiki","href","RandomChar","updateChar","getCharacter","Math","floor","random","mjolnir","comics","length","to","resourceURI","split","pop","CharInfo","updaterChar","charId","SearchForm","useMarvelService","getCharacterName","errorMessage","ErrorMessage","results","initialValues","charName","validationSchema","Yup","required","onSubmit","htmlFor","type","placeholder","ErrorBoundary","state","error","errorInfo","this","setState","children","Component","MainPage","selectedChar","setSelectedChar","decoration","img","width","height","margin","MarvelServices","loading","setLoading","setError","request","useCallback","url","a","method","body","headers","fetch","response","ok","Error","status","json","useHttp","_apiBase","_apiKey","_baseOffset","limit","res","_transformCharacter","getComics","_transformComics","getComic","descr","substr","path","extension","urls","items","title","pageCount","language","textObjects","price","prices","Skeleton","Spinner"],"mappings":"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","file":"static/js/5.d04ade9d.chunk.js","sourcesContent":["import { useState, useRef, useEffect, useMemo } from 'react';\r\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\r\nimport PropTypes from 'prop-types';\r\nimport setContent from '../../utils/setContent';\r\n\r\nimport useMarvelServices from '../../services/MarvelServices';\r\n\r\nimport './charList.scss';\r\n\r\nconst CharList = (props) => {\r\n\r\n        const [char, setChar] = useState([])\r\n        const [newItemLoading, setNewItemLoading] = useState(false)\r\n        const [offset, setOffset] = useState(210)\r\n        const [ended, setEnded] = useState(false)\r\n    \r\n   const {getAllCharacters, clearError, process, setProcess} = useMarvelServices();\r\n\r\n      const  onCharLoaded = (charList) => {\r\n            let ended = false;\r\n            if (offset >= 1550) {\r\n                ended = true;\r\n            }\r\n            setChar(char => [...char, ...charList])\r\n\r\n            setNewItemLoading(false)\r\n            setOffset(offset => offset + 9)\r\n            setEnded(ended)\r\n        }\r\n\r\n      const  onRequest = (offset, character) => {\r\n        setNewItemLoading(true)\r\n            clearError();\r\n            getAllCharacters(offset, character)\r\n            .then(onCharLoaded)\r\n            .then(() => setProcess('confirmed'));\r\n        }\r\n\r\n\r\n        const myRef = useRef([]);\r\n        \r\n       const onRef = (id) => {\r\n            myRef.current[id].focus();\r\n              } \r\n\r\n        useEffect(() => {\r\n                onRequest()\r\n                // eslint-disable-next-line react-hooks/exhaustive-deps\r\n        }, [])\r\n\r\n        const content = useMemo(() => {\r\n           return setContent(process, () => chars())\r\n           // eslint-disable-next-line react-hooks/exhaustive-deps\r\n        }, [process]);\r\n\r\n        return (\r\n            <div className=\"char__list\">\r\n                {process === 'loading' ? chars() : null}\r\n                {content}\r\n                <button className=\"button button__main button__long\"\r\n                        disabled={newItemLoading}\r\n                        onClick={() => onRequest(offset)}\r\n                        style={{display: ended ? 'none' : 'block'}}>\r\n                    <div className=\"inner\">load more</div>\r\n                </button>\r\n            </div>\r\n        )\r\n        function chars() {\r\n            const content = char.map((item, i) => {\r\n        \r\n            const {name, thumbnail, id} = item;\r\n            const objFit = thumbnail === \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\" ? \"contain\" : \"cover\";\r\n            return ( \r\n            <CSSTransition key={id} timeout={1000} classNames=\"charListAnimate\">\r\n                    <li className=\"char__item\" key={id}\r\n                    onClick={() => {\r\n                        props.onCharSelected(id);\r\n                        onRef(i)\r\n                    }}\r\n                    tabIndex={0}\r\n                    onKeyDown={(e) => {\r\n                        if (e.key === \"Enter\") {\r\n                            props.onCharSelected(id);\r\n                            onRef(i)\r\n                        }\r\n                    }}\r\n                    ref={ref => myRef.current[i] = ref}>\r\n                        <img src={thumbnail} style={{objectFit: objFit}} alt={name}/>\r\n                        <div className=\"char__name\">{name}</div>\r\n                    </li> \r\n            </CSSTransition>\r\n            )\r\n        }) \r\n                    return   <ul className=\"char__grid\">\r\n                        <TransitionGroup component={null}>\r\n                                {content}\r\n                        </TransitionGroup>\r\n                             </ul>\r\n\r\n                }\r\n}\r\n\r\n    \r\n\r\n        CharList.propTypes = {\r\n            onCharSelected: PropTypes.func\r\n        }\r\n    \r\n\r\nexport default CharList;","export default __webpack_public_path__ + \"static/media/mjolnir.61f31e18.png\";","import { useState, useEffect } from 'react';\r\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\r\nimport useMarvelServices from '../../services/MarvelServices';\r\nimport setContent from '../../utils/setContent';\r\n\r\n\r\nimport './randomChar.scss';\r\nimport mjolnir from '../../resources/img/mjolnir.png';\r\n\r\nconst RandomChar = () => {\r\n\r\n        const [char, setChar] = useState({})\r\n    \r\n    useEffect(() => {\r\n        updateChar();\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [])\r\n\r\n   const {getCharacter, clearError, setProcess, process} = useMarvelServices();\r\n\r\n   const onCharLoaded = (char) => {\r\n        setChar(char)\r\n\r\n    }\r\n\r\n    const updateChar = () => {\r\n        clearError();\r\n        const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\r\n\r\n        getCharacter(id)\r\n        .then(onCharLoaded)\r\n        .then(() => setProcess('confirmed'));\r\n    }\r\n\r\n        return (\r\n            \r\n            <div className=\"randomchar\">\r\n                    {setContent(process, View, char)}\r\n                <div className=\"randomchar__static\">\r\n                    <p className=\"randomchar__title\">\r\n                        Random character for today!<br/>\r\n                        Do you want to get to know him better?\r\n                    </p>\r\n                    <p className=\"randomchar__title\">\r\n                        Or choose another one\r\n                    </p>\r\n                    <button className=\"button button__main\" onClick={updateChar}>\r\n                        <div className=\"inner\">try it</div>\r\n                    </button>\r\n                    <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\r\n                </div>\r\n            </div>\r\n        )\r\n}\r\n\r\nconst View = ({data}) => {\r\n    const { name, description, thumbnail, homepage, wiki} = data;\r\n\r\n    const objFit = thumbnail === \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\" ? \"contain\" : \"cover\";\r\n    const content = \r\n    [\r\n        <CSSTransition key={name} timeout={1000} classNames=\"randomchar__block\">\r\n            <div className=\"randomchar__block\">\r\n               <img src={thumbnail} style={{objectFit: objFit}} alt=\"Random character\" className=\"randomchar__img\"/>\r\n                    <div className=\"randomchar__info\">\r\n                        <p className=\"randomchar__name\">{name}</p>\r\n                        <p className=\"randomchar__descr\">\r\n                            {description}\r\n                        </p>\r\n                        <div className=\"randomchar__btns\">\r\n                            <a href={homepage} className=\"button button__main\">\r\n                                <div className=\"inner\">homepage</div>\r\n                            </a>\r\n                            <a href={wiki} className=\"button button__secondary\">\r\n                                <div className=\"inner\">Wiki</div>\r\n                            </a>\r\n                        </div>\r\n                    </div>     \r\n            </div>\r\n        </CSSTransition>\r\n        ]\r\n    return (\r\n        <TransitionGroup component={null}>\r\n            {content}\r\n        </TransitionGroup>\r\n    )\r\n}\r\n\r\nexport default RandomChar;","import { useState, useEffect } from 'react/cjs/react.development';\r\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\r\nimport { Link } from 'react-router-dom';\r\nimport useMarvelServices from '../../services/MarvelServices';\r\nimport setContent from '../../utils/setContent';\r\n\r\nimport './charInfo.scss';\r\n\r\nconst CharInfo = (props) => {\r\n\r\n    const [char, setChar] = useState(null);\r\n\r\n    \r\n    const {getCharacter, clearError, process, setProcess} = useMarvelServices();\r\n    useEffect(() => {\r\n        updaterChar();\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        updaterChar();\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [props.charId])\r\n\r\n   const updaterChar = () => {\r\n        clearError();\r\n        const {charId} = props\r\n        if (!charId) {\r\n            return;\r\n        }\r\n\r\n        getCharacter(charId)\r\n        .then(onCharLoaded)\r\n        .then(() => setProcess('confirmed'));\r\n    }\r\n\r\n    const onCharLoaded = (char) => {\r\n        setChar(char)\r\n    }\r\n\r\n        return (\r\n                <div className=\"char__info\">\r\n                    {setContent(process, View, char)}\r\n                </div>\r\n        )\r\n}\r\n\r\n    const View = ({data}) => {\r\n        const {name, description, thumbnail, homepage, wiki, comics} = data;\r\n        const objFit = thumbnail === \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\" ? \"contain\" : \"cover\";\r\n        if (comics.length > 10) {\r\n            comics.length = 10;\r\n        }\r\n        return (\r\n            <TransitionGroup>\r\n            <CSSTransition key={name} timeout={1000} classNames=\"charInfoAnimate\">\r\n            <div>\r\n        <div className=\"char__basics\">\r\n                    <img src={thumbnail} alt={name} style={{objectFit: objFit}}/>\r\n                    <div>\r\n                        <div className=\"char__info-name\">{name}</div>\r\n                        <div className=\"char__btns\">\r\n                            <a href={homepage} className=\"button button__main\">\r\n                                <div className=\"inner\">homepage</div>\r\n                            </a>\r\n                            <a href={wiki} className=\"button button__secondary\">\r\n                                <div className=\"inner\">Wiki</div>\r\n                            </a>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"char__descr\">\r\n                    {description}\r\n                </div>\r\n                <div className=\"char__comics\">Comics:</div>\r\n                <ul className=\"char__comics-list\">\r\n                    {comics.length > 0 ? null : \"комиксов нет\"}\r\n                    {comics.map((item, i) => {\r\n                            return (\r\n                        <li key={i} className=\"char__comics-item\">\r\n                            <Link to={`/marvelWeb/comics/${item.resourceURI.split(\"/\").pop()}`}>{item.name}</Link>\r\n                        </li>\r\n                            )\r\n                        })}\r\n                </ul>\r\n            </div>\r\n            </CSSTransition>\r\n            </TransitionGroup>\r\n        )\r\n        \r\n\r\n    }\r\n\r\nexport default CharInfo;","import { useState } from \"react\";\r\nimport { Formik, Form, Field, ErrorMessage as FormikErrorMessage } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport {Link} from 'react-router-dom';\r\n\r\nimport useMarvelService from '../../services/MarvelServices';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\n\r\nimport './charSearchForm.scss';\r\n\r\nconst SearchForm = () => {\r\n    const [char, setChar] = useState(null);\r\n\r\n    const {getCharacterName, process, setProcess, clearError} = useMarvelService();\r\n\r\n    const updateChar = (name) => {\r\n        clearError();\r\n\r\n        getCharacterName(name)\r\n        .then(onCharLoaded)\r\n        .then(() => setProcess('confirmed'));\r\n    }\r\n\r\n    const onCharLoaded = (char) => {\r\n        setChar(char)\r\n    }\r\n\r\n\r\n    const errorMessage = process === 'error' ? <div className=\"char__search-critical-error\"><ErrorMessage /></div> : null;\r\n    const results = !char ? null : char.id ?\r\n                    <div className=\"char__search-wrapper\">\r\n                        <div className=\"char__search-success\">There is! Visit {char.name} page?</div>\r\n                        <Link to={`/character/${char.name}`} className=\"button button__secondary\">\r\n                            <div className=\"inner\">To page</div>\r\n                        </Link>\r\n                    </div> : \r\n                    <div className=\"char__search-error\">\r\n                        The character was not found. Check the name and try again\r\n                    </div>;\r\n\r\n                        \r\n\r\n\r\n    return (\r\n        <div className=\"char__search-form\">\r\n            <Formik\r\n                initialValues = {{\r\n                    charName: ''\r\n                }}\r\n                validationSchema = {Yup.object({\r\n                    charName: Yup.string().required('This field is required')\r\n                })}\r\n                onSubmit = { ({charName}) => {\r\n                    updateChar(charName);\r\n                }}\r\n            >\r\n                <Form>\r\n                    <label className=\"char__search-label\" htmlFor=\"charName\">Or find a character by name:</label>\r\n                    <div className=\"char__search-wrapper\">\r\n                        <Field \r\n                            id=\"charName\" \r\n                            name='charName' \r\n                            type='text' \r\n                            placeholder=\"Enter name\"/>\r\n                        <button \r\n                            type='submit' \r\n                            className=\"button button__main\"\r\n                            disabled={process === 'loading' ? true : false}>\r\n                            <div className=\"inner\">find</div>\r\n                        </button>\r\n                    </div>\r\n                    <FormikErrorMessage component=\"div\" className=\"char__search-error\" name=\"charName\" />\r\n                </Form>\r\n            </Formik>\r\n            {results}\r\n            {errorMessage}\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default SearchForm;\r\n","import { Component } from \"react/cjs/react.production.min\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nclass ErrorBoundary extends Component {\r\n    state = {\r\n        error: false\r\n    }\r\n    componentDidCatch(error, errorInfo) {   \r\n        this.setState({\r\n            error: true\r\n        })\r\n    }\r\n    \r\n    render() {\r\n        if (this.state.error) {\r\n            return <ErrorMessage/>\r\n        }\r\n\r\n        return this.props.children\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","export default __webpack_public_path__ + \"static/media/vision.067d4ae1.png\";","import { useState } from \"react\";\r\nimport { Helmet, HelmetProvider } from 'react-helmet-async';\r\n\r\nimport CharList from \"../charList/CharList\";\r\nimport RandomChar from \"../randomChar/RandomChar\";\r\nimport CharInfo from \"../charInfo/CharInfo\";\r\nimport SearchForm from \"../charSearchForm/charSearchForm\";\r\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\r\n\r\nimport decoration from '../../resources/img/vision.png';\r\n\r\n\r\nconst MainPage = () => {\r\n\r\n    const [selectedChar, setSelectedChar] = useState(null)\r\n\r\n   const onCharSelected = (id) => {\r\n        setSelectedChar(id)\r\n    }\r\n\r\n    return (\r\n        <HelmetProvider>\r\n        <>\r\n            <Helmet>\r\n                <meta\r\n                    name=\"description\"\r\n                    content=\"Marvel information portal\"\r\n                    />\r\n                <title>Marvel information portal</title>\r\n            </Helmet>\r\n                        <RandomChar/>\r\n                    <div className=\"char__content\">\r\n                        <ErrorBoundary>\r\n                            <CharList onCharSelected={onCharSelected}/>\r\n                        </ErrorBoundary>\r\n                        <div className=\"char__block\">\r\n                        <ErrorBoundary>\r\n                            <CharInfo charId={selectedChar}/>\r\n                        </ErrorBoundary>\r\n                        <ErrorBoundary>\r\n                            <SearchForm/>\r\n                        </ErrorBoundary>\r\n                        </div>\r\n                        \r\n                    </div>\r\n                    <img className=\"bg-decoration\" src={decoration} alt=\"vision\"/>\r\n        </>\r\n        </HelmetProvider> \r\n    )\r\n}\r\n\r\nexport default MainPage;","export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","\r\nimport img from \"./error.gif\";\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <img src={img} style={{ display: 'block', width: \"250px\", height: \"250px\",objectFit: 'contain', margin: \"0 auto\"}} alt=\"Error\"/>\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;","import { useHttp } from \"../hooks/http.hook\";\r\n\r\nconst MarvelServices = () => {\r\n    \r\n    const {loading, request, error, clearError, process, setProcess} = useHttp();\r\n\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n    const _apiKey = 'apikey=1edd0447276bb1866d74649bfc5c1316';\r\n    const _baseOffset = 210;\r\n    const _baseLimit = 9;\r\n\r\n\r\n    const getAllCharacters = async (offset = _baseOffset, limit = _baseLimit) => {\r\n         const res = await request(`${_apiBase}characters?limit=${limit}&offset=${offset}&${_apiKey}`);\r\n                return res.data.results.map(_transformCharacter);\r\n     }\r\n     const getCharacter = async (id) => {\r\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n        return _transformCharacter(res.data.results[0]);\r\n    }\r\n    const getCharacterName = async (name) => {\r\n        const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n        return _transformCharacter(res.data.results[0]);\r\n    }\r\n    const getComics = async (offset = _baseOffset, limit = _baseLimit) => {\r\n        const res = await request(`${_apiBase}comics?limit=${limit}&offset=${offset}&${_apiKey}`);\r\n                return res.data.results.map(item => _transformComics(item));\r\n    }\r\n    const getComic = async (id) => {\r\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n        return _transformComics(res.data.results[0]);\r\n    }\r\n\r\n    const _transformCharacter = (char) => {\r\n       const descr = !char.description ? \"К сожалению, описания этого персонажа нет\" : char.description;\r\n       const description = descr.length > 200 ? descr.substr(0, 200) + \"...\" : descr;\r\n\r\n        return {\r\n                id: char.id,\r\n                name: char.name,\r\n                description: description,\r\n                thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n                homepage: char.urls[0].url,\r\n                wiki: char.urls[1].url,\r\n                comics: char.comics.items\r\n        }\r\n    }\r\n\r\n    const _transformComics = (comics) => {\r\n        return {\r\n            id: comics.id,\r\n            title: comics.title,\r\n            description: comics.description || 'There is no description',\r\n            pageCount: comics.pageCount ? `${comics.pageCount} p.` : 'No information about the number of pages',\r\n            thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\r\n            language: comics.textObjects.language || 'en-us',\r\n            price: comics.prices[0].price ? `${comics.prices[0].price}$` : 'not available'\r\n        }\r\n    }\r\n\r\n    return {getAllCharacters, getCharacter, getComics, loading, error, clearError, getComic, getCharacterName, process, setProcess}\r\n}\r\n\r\nexport default MarvelServices;","import { useCallback, useState } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n    const [loading, setLoading] = useState(false)\r\n    const [error, setError] = useState(null)\r\n    const [process, setProcess] = useState('waiting')\r\n\r\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type': 'application/json'}) => {\r\n        setLoading(true);\r\n        setProcess('loading');\r\n\r\n        try {\r\n            const response = await fetch(url, {method, body, headers})\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`)\r\n            }\r\n\r\n            const data = await response.json()\r\n\r\n            setLoading(false);\r\n\r\n            return data\r\n        } catch(e) {\r\n            setLoading(false);\r\n            setError(true);\r\n            setProcess('error');\r\n            throw e;\r\n        }\r\n    }, []) \r\n\r\n    const clearError = useCallback(() => {\r\n        setError(null);\r\n        setProcess('waiting');\r\n    }, [])\r\n\r\n    return {loading, error, request, clearError, process, setProcess}\r\n    \r\n}","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import ErrorMessage from '../components/errorMessage/ErrorMessage';\r\nimport Spinner from '../components/spinner/Spinner';\r\nimport Sceleton from '../components/skeleton/Skeleton';\r\n\r\nconst setContent = (process, Component, data) => {\r\n\r\n    switch (process) {\r\n        case 'waiting':\r\n            return <Sceleton/>;\r\n        case 'loading':\r\n            return <Spinner/>;\r\n        case 'confirmed':\r\n            return <Component data={data}/>;\r\n        case 'error':\r\n            return <ErrorMessage/>;\r\n        default:\r\n            throw new Error('Unexpected process state');\r\n    }\r\n}\r\n\r\nexport default setContent;"],"sourceRoot":""}