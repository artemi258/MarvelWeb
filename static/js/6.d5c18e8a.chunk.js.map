{"version":3,"sources":["components/comicsList/ComicsList.js","resources/img/Avengers.png","resources/img/Avengers_logo.png","components/appBanner/AppBanner.js","components/pages/ComicsPage.js","components/errorMessage/error.gif","components/errorMessage/ErrorMessage.js","services/MarvelServices.js","hooks/http.hook.js","components/skeleton/Skeleton.js","utils/setContent.js"],"names":["ComicsList","useState","char","setChar","offset","setOffset","setComics","newItemLoading","setNewItemLoading","history","useNavigate","useMarvelServices","getComics","error","clearError","process","setProcess","useEffect","onRequest","onCharLoaded","charList","comics","then","catch","comicsList","content","map","item","i","className","to","id","src","thumbnail","alt","name","price","setContent","disabled","onClick","AppBanner","avengers","avengersLogo","ComicsPage","ErrorMessage","img","style","display","width","height","objectFit","margin","MarvelServices","loading","setLoading","setError","request","useCallback","url","a","method","body","headers","fetch","response","ok","Error","status","json","data","useHttp","_apiBase","_apiKey","_baseOffset","getAllCharacters","limit","res","results","_transformCharacter","getCharacter","getCharacterName","_transformComics","getComic","descr","description","length","substr","path","extension","homepage","urls","wiki","items","title","pageCount","language","textObjects","prices","Skeleton","Component","Spinner"],"mappings":"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","file":"static/js/6.d5c18e8a.chunk.js","sourcesContent":["import { Link, useNavigate } from 'react-router-dom';\r\nimport { useState, useEffect } from 'react';\r\n\r\nimport useMarvelServices from '../../services/MarvelServices';\r\nimport setContent from '../../utils/setContent';\r\n\r\nimport './comicsList.scss';\r\n\r\nconst ComicsList = () => {\r\n    const [char, setChar] = useState([]);\r\n    const [offset, setOffset] = useState(210);\r\n    const [comics, setComics] = useState(0);\r\n    const [newItemLoading, setNewItemLoading] = useState(false);\r\n    const history = useNavigate();\r\n\r\n    const {getComics, error, clearError, process, setProcess} = useMarvelServices();\r\n\r\n    useEffect(() => {\r\n        // if (localStorage.getItem('offsetComics') > 210 && localStorage.getItem('comics') > 0) {  // если не первый запуск , то выполнять\r\n\r\n        //     setOffset(+(localStorage.getItem('offsetComics')) - 12)       // если переходить с комиксов + 9 к лимиту и персонажам не делать\r\n        //     setComics(+(localStorage.getItem('comics')) - 12)\r\n        //     onRequest(210, +(localStorage.getItem('comics')))\r\n        // } else {\r\n        //     onRequest(210, 12)\r\n        // }\r\n            onRequest(210, 12)\r\n\r\n    }, [])\r\n\r\n    // useEffect(() => {\r\n    //     if (offset > 210 && comics > 0) {        //если новые данные еще не записались, то в локал не записывать\r\n    //         localStorage.setItem('offsetComics', offset)\r\n    //         localStorage.setItem('comics', comics)\r\n    //     }\r\n    // }, [offset, comics])\r\n\r\n    const  onCharLoaded = (charList) => {\r\n        setNewItemLoading(false)\r\n\r\n        setChar(char => [...char, ...charList])\r\n\r\n        setOffset(offset => offset + 12)\r\n        setComics(comics => comics + 12)\r\n    }\r\n\r\n  const  onRequest = (offset, comics) => {\r\n    setNewItemLoading(true)\r\n\r\n        clearError();\r\n        getComics(offset, comics)\r\n        .then(onCharLoaded)\r\n        .then(() => setProcess('confirmed'))\r\n        .catch(() => onRequest(offset, 12));\r\n    }\r\n\r\n    const comicsList = () => {\r\n        const content = char.map((item, i) => {\r\n            return (\r\n                    <li className=\"comics__item\" key={i}>\r\n                        <Link to={`/comics/${item.id}`}>\r\n                            <img src={item.thumbnail} alt={item.name} className=\"comics__item-img\"/>\r\n                            <div className=\"comics__item-name\">{item.name}</div>\r\n                            <div className=\"comics__item-price\">{item.price}</div>\r\n                        </Link>\r\n                    </li>\r\n            )\r\n        })\r\n            return <ul className=\"comics__grid\">\r\n                        {content}\r\n                    </ul>;\r\n        \r\n    }\r\n\r\n            if (error) {\r\n                history('/error')\r\n            }\r\n\r\n    return (\r\n        <div className=\"comics__list\">\r\n                {process === 'loading' ? comicsList() : null}\r\n                {setContent(process, () => comicsList(), char)}\r\n            <button disabled={newItemLoading} onClick={() => onRequest(offset, 12)} className=\"button button__main button__long\">\r\n                <div className=\"inner\">load more</div>\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ComicsList;","export default __webpack_public_path__ + \"static/media/Avengers.4065c8f9.png\";","export default __webpack_public_path__ + \"static/media/Avengers_logo.9eaf2193.png\";","import './appBanner.scss';\nimport avengers from '../../resources/img/Avengers.png';\nimport avengersLogo from '../../resources/img/Avengers_logo.png';\n\nconst AppBanner = () => {\n    return (\n        <div className=\"app__banner\">\n            <img src={avengers} alt=\"Avengers\"/>\n            <div className=\"app__banner-text\">\n                New comics every week!<br/>\n                Stay tuned!\n            </div>\n            <img src={avengersLogo} alt=\"Avengers logo\"/>\n        </div>\n    )\n}\n\nexport default AppBanner;","import { Helmet, HelmetProvider } from 'react-helmet-async';\r\n\r\nimport ComicsList from \"../comicsList/ComicsList\";\r\nimport AppBanner from \"../appBanner/AppBanner\";\r\n\r\n\r\nconst ComicsPage = () => {\r\n    return (\r\n        <HelmetProvider>\r\n        <>\r\n            <Helmet>\r\n                    <meta\r\n                        name=\"description\"\r\n                        content=\"Marvel comics\"\r\n                        />\r\n                        <title>Marvel comics</title>\r\n                </Helmet>\r\n            <AppBanner/>\r\n            <ComicsList/>\r\n        </>\r\n        </HelmetProvider>\r\n    )\r\n}\r\n\r\nexport default ComicsPage;","export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","\r\nimport img from \"./error.gif\";\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <img src={img} style={{ display: 'block', width: \"250px\", height: \"250px\",objectFit: 'contain', margin: \"0 auto\"}} alt=\"Error\"/>\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;","import { useHttp } from \"../hooks/http.hook\";\r\n\r\nconst MarvelServices = () => {\r\n    \r\n    const {loading, request, error, clearError, process, setProcess} = useHttp();\r\n\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n    const _apiKey = 'apikey=1edd0447276bb1866d74649bfc5c1316';\r\n    const _baseOffset = 210;\r\n    const _baseLimit = 9;\r\n\r\n\r\n    const getAllCharacters = async (offset = _baseOffset, limit = _baseLimit) => {\r\n         const res = await request(`${_apiBase}characters?limit=${limit}&offset=${offset}&${_apiKey}`);\r\n                return res.data.results.map(_transformCharacter);\r\n     }\r\n     const getCharacter = async (id) => {\r\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n        return _transformCharacter(res.data.results[0]);\r\n    }\r\n    const getCharacterName = async (name) => {\r\n        const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n        return _transformCharacter(res.data.results[0]);\r\n    }\r\n    const getComics = async (offset = _baseOffset, limit = _baseLimit) => {\r\n        const res = await request(`${_apiBase}comics?limit=${limit}&offset=${offset}&${_apiKey}`);\r\n                return res.data.results.map(item => _transformComics(item));\r\n    }\r\n    const getComic = async (id) => {\r\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n        return _transformComics(res.data.results[0]);\r\n    }\r\n\r\n    const _transformCharacter = (char) => {\r\n       const descr = !char.description ? \"К сожалению, описания этого персонажа нет\" : char.description;\r\n       const description = descr.length > 200 ? descr.substr(0, 200) + \"...\" : descr;\r\n\r\n        return {\r\n                id: char.id,\r\n                name: char.name,\r\n                description: description,\r\n                thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n                homepage: char.urls[0].url,\r\n                wiki: char.urls[1].url,\r\n                comics: char.comics.items\r\n        }\r\n    }\r\n\r\n    const _transformComics = (comics) => {\r\n        return {\r\n            id: comics.id,\r\n            title: comics.title,\r\n            description: comics.description || 'There is no description',\r\n            pageCount: comics.pageCount ? `${comics.pageCount} p.` : 'No information about the number of pages',\r\n            thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\r\n            language: comics.textObjects.language || 'en-us',\r\n            price: comics.prices[0].price ? `${comics.prices[0].price}$` : 'not available'\r\n        }\r\n    }\r\n\r\n    return {getAllCharacters, getCharacter, getComics, loading, error, clearError, getComic, getCharacterName, process, setProcess}\r\n}\r\n\r\nexport default MarvelServices;","import { useCallback, useState } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n    const [loading, setLoading] = useState(false)\r\n    const [error, setError] = useState(null)\r\n    const [process, setProcess] = useState('waiting')\r\n\r\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type': 'application/json'}) => {\r\n        setLoading(true);\r\n        setProcess('loading');\r\n\r\n        try {\r\n            const response = await fetch(url, {method, body, headers})\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`)\r\n            }\r\n\r\n            const data = await response.json()\r\n\r\n            setLoading(false);\r\n\r\n            return data\r\n        } catch(e) {\r\n            setLoading(false);\r\n            setError(true);\r\n            setProcess('error');\r\n            throw e;\r\n        }\r\n    }, []) \r\n\r\n    const clearError = useCallback(() => {\r\n        setError(null);\r\n        setProcess('waiting');\r\n    }, [])\r\n\r\n    return {loading, error, request, clearError, process, setProcess}\r\n    \r\n}","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import ErrorMessage from '../components/errorMessage/ErrorMessage';\r\nimport Spinner from '../components/spinner/Spinner';\r\nimport Sceleton from '../components/skeleton/Skeleton';\r\n\r\nconst setContent = (process, Component, data) => {\r\n\r\n    switch (process) {\r\n        case 'waiting':\r\n            return <Sceleton/>;\r\n        case 'loading':\r\n            return <Spinner/>;\r\n        case 'confirmed':\r\n            return <Component data={data}/>;\r\n        case 'error':\r\n            return <ErrorMessage/>;\r\n        default:\r\n            throw new Error('Unexpected process state');\r\n    }\r\n}\r\n\r\nexport default setContent;"],"sourceRoot":""}